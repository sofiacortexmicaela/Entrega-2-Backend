--------------------4.5 Actividad práctica Manejo de Archivos mediante Servidor con Express-------------------------

###ProductManager.js 

1- crear clase product manager que se encarga de gestionar los productos almacenados en un archivo JSON,
Sus métodos permiten agregar, leer y buscar productos.

class ProductManager {
    constructor(path) {
        this.path = path; // Ruta del archivo donde se almacenarán los productos
    }
}

2- creo metodo readProducts que Lee el archivo JSON y devuelve su contenido como un arreglo de productos.
,Este método se utiliza internamente para cargar los datos antes de procesarlos.

readProducts() {
        try {
            if (fs.existsSync(this.path)) {
                const data = fs.readFileSync(this.path, 'utf-8'); // Usa fs.readFileSync correctamente
                return JSON.parse(data); // Convertir los datos a JSON
            }
            return []; // Si el archivo no existe, devolver un arreglo vacío
        } catch (error) {
            console.error('Error al leer el archivo:', error);
            return []; // Si ocurre un error, devolver un arreglo vacío
        }
    }

3- creo metodo saveProducts que Guarda un arreglo de productos en el archivo JSON.
Se utiliza internamente para actualizar el archivo cada vez que se agrega o modifica un producto.

saveProducts(products) {
    fs.writeFileSync(this.path, JSON.stringify(products, null, 2), 'utf-8'); // Guarda los datos en el archivo
}

3- creo metodo getProducts que 
    getProducts() {
        return this.readProducts();
    }

4- creo metodo addProduct que  Recibe un objeto con los datos de un producto,
le asigna un ID único y lo guarda en el archivo.

addProduct(product) {
        const products = this.readProducts();
        const newProduct = {
            id: products.length > 0 ? products[products.length - 1].id + 1 : 1,
            ...product
        };
        products.push(newProduct);
        this.saveProducts(products);
        return newProduct;
    }

5- creo metodo getProducts que Devuelve un arreglo con todos los productos almacenados 
en el archivo.

    getProducts() {
        return this.readProducts();
    }

6- creo metodo getProductById que Busca un producto por su ID y lo devuelve. 
Si no existe, lanza un error.

    getProductById(id) {
        const products = this.readProducts();
        const product = products.find(p => p.id === id);
        if (!product) {
            throw new Error(`Product with id ${id} not found.`);
        }
        return product;
    }

###app.js---> Este archivo es una aplicación Express que utiliza la clase `ProductManager`
para exponer endpoints API.

1- Configura el servidor Express y crea una instancia de `ProductManager`
con la ruta del archivo `products.json`:

const express = require('express');
const ProductManager = require('./ProductManager');

const app = express();
const port = 3000;

const productManager = new ProductManager('./products.json');

// Middleware para analizar JSON
app.use(express.json());

2- Devuelve todos los productos almacenados con get

app.get('/products', (req, res) => {
    try {
        const products = productManager.getProducts();
        res.json({ products });
    } catch (err) {
        res.status(500).json({ error: 'Error al obtener los productos.' });
    }
});

- **Respuesta**:
  ```json
  {
      "products": []
  }

3- Devuelve un producto específico por su ID con get 

app.get('/products/:pid', (req, res) => {
    try {
        const pid = parseInt(req.params.pid, 10); // Convierte el ID a un número
        const product = productManager.getProductById(pid);
        res.json({ product });
    } catch (err) {
        res.status(404).json({ error: err.message });
    }
});

- **Respuesta (si existe)**:
  ```json
  {
      "product": {
          "id": 1,
          "title": "Hat",
          "description": "A nice hat",
          "price": 20,
          "thumbnail": "hat.jpg",
          "code": "HAT001",
          "stock": 15
      }
  }
  ```
- **Respuesta (si no existe)**: json:

  {
      "error": "Product with id 1 not found."
  }

4- Recibe un producto en formato JSON, lo agrega al archivo `products.json` 
y devuelve el producto recién creado:

app.post('/products', (req, res) => {
    try {
        const newProduct = productManager.addProduct(req.body); // Agrega un nuevo producto
        res.status(201).json(newProduct); // Devuelve el producto agregado
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

- **Ejemplo de solicitud**:
  ```json
  {
      "title": "Shoes",
      "description": "A pair of shoes",
      "price": 50,
      "thumbnail": "shoes.jpg",
      "code": "SH001",
      "stock": 10
  }

-----------------------------Prueba de endpoints--------------------------------------

0.Crea el archivo products.json: Antes de iniciar, crea un archivo vacío llamado products.json 
en el mismo directorio que los archivos ProductManager.js y app.js (aca se va a guardar cada producto que cree con el POST)

1. GET /products: Devuelve todos los productos almacenados.

devuelve []
porque no almacene ningun producto

GET /products/:pid: Reemplaza :pid con un ID (por ejemplo, 1) para obtener un producto específico.

devuelve porque no hay productos con el ID especificado
{
    "error": "Product with id NaN not found."
}

3.si intento agregar un producto con un POST   (no esta en el enunciado pero para probar )

app.post('/products', (req, res) => {
    try {
        const newProduct = productManager.addProduct(req.body);
        res.status(201).json(newProduct);
    } catch (error) {
        res.status(400).json({ error: error.message });
    }
});

voy al postman, creo un producto nuevo con el metodo post->body->raw (escribo productos en formato JSON)

muestra cada producto nuevo , cada uno con su id -->creo 2 productos

Hago get y devuelve el arreglo con los 2 productos creados recien y se estan guardando en el products.json

si hago un get con la ruta localhost:3000/products/2 ---> devuelve el producto con el id:2










-----------------------------------------------------------------------------------------------











ENTREGA N°1 

1- cambiar el puerto a 8080 y crear archivos de rutas 
2-organizar estructura del proyecto:

src/
  routes/               <-- Carpeta para los routers de Express
    products.router.js  <-- Archivo para las rutas de productos
    carts.router.js     <-- Archivo para las rutas de carritos
  app.js                <-- Punto de entrada del servidor

src/routes/products.router.js--------> define todas las rutas relacionadas con productos, como listar productos, agregar nuevos, etc.
src/routes/carts.router.js-----------> define todas las rutas relacionadas con carritos, como crear carritos, listar productos en un carrito, etc.
src/app.js---------------------------> archivo principal del servidor donde se inicializa Express y se usan los routers.

3- crear router para productos

Importar express para poder usar express.Router().
Crear una instancia de router con express.Router().
Definir rutas específicas, como GET / para listar productos y GET /:pid para obtener un producto por ID.
Exportar el router para que pueda ser utilizado en el archivo principal (app.js).

4- Crear un router para carritos
En el archivo carts.router.js, repetí un procedimiento similar, pero ahora con las rutas relacionadas con los carritos.

Importar express para usar express.Router().
Crear una instancia de router.
Definir rutas específicas, como POST / para crear un carrito y GET /:cid para obtener un carrito por ID.
Exportar el router.


5-Configurar los routers en app.js

En el archivo principal (app.js)

Importar express para iniciar el servidor.
Importar los routers (products.router.js y carts.router.js).
Usar el middleware express.json() para parsear cuerpos JSON.
Vincular los routers a las rutas principales /api/products y /api/carts.



-----------------------------------------------------------------------------------------------------



6- Crear rutas para Manejo de Productos (/api/products/)

GET /:     <3     url---> http://localhost:8080/api/products 
Debe listar todos los productos de la base de datos.
###
// Ruta para obtener todos los productos
router.get('/', (req, res) => {
    try {
        const products = productManager.getProducts();
        res.json({ products });
    } catch (error) {
        res.status(500).json({ error: 'Error al obtener los productos.' });
    }
});
###


GET /:pid:   <3   url------>  http://localhost:8080/api/products/3
Debe traer solo el producto con el id proporcionado.
###
// Ruta para obtener un producto por su ID
router.get('/:pid', (req, res) => {
    try {
        const pid = parseInt(req.params.pid, 10); // Convertir el ID a número
        const product = productManager.getProductById(pid); // Buscar el producto
        res.json({ product });
    } catch (error) {
        res.status(404).json({ error: error.message });
    }
});
###



POST /:    <3      url--------> http://localhost:8080/api/products 
Debe agregar un nuevo producto con los siguientes campos:
id: Number/String (No se manda desde el body, se autogenera para asegurar que nunca se repitan los ids).

title: String

description: String

code: String

price: Number

status: Boolean

stock: Number

category: String

thumbnails: Array de Strings (rutas donde están almacenadas las imágenes del producto).

--------> pruebo en postam,  con POST y ruta: http://localhost:8080/api/products  ,toco body y raw para el formatoJSON y escribo:
{
  "title": "Producto de prueba",
  "description": "Descripción del producto de prueba",
  "code": "PRD01",
  "price": 100.50,
  "status": true,
  "stock": 20,
  "category": "Categoría de prueba",
  "thumbnails": [
    "ruta/imagen1.jpg",
    "ruta/imagen2.jpg"
  ]
}


PUT /:pid:  <3       url-----> http://localhost:8080/api/products/1 
Debe actualizar un producto por los campos enviados desde el body. No se debe actualizar ni eliminar el idal momento de hacer la actualización.
toco body--> raw---> escribo: {
  "title": "Producto actualizado",
  "description": "Descripción actualizada del producto",
  "price": 150.75,
  "status": false,
  "stock": 10,
  "category": "Nueva categoría",
  "thumbnails": [
    "ruta/nueva-imagen1.jpg",
    "ruta/nueva-imagen2.jpg"
  ]
}

DELETE /:pid:   <3     url ----->  http://localhost:8080/api/products/1
Debe eliminar el producto con el pid indicado.

GET/     <3     url------------> localhost:8080/api/products
Debería listar todos los productos.

GET/:pid:     <3     url--------->  http://localhost:8080/api/products/2
Debería devolver un producto por su ID


POST /api/products  <3      -----> http://localhost:8080/api/products
Debería agregar un nuevo producto.  

PUT /api/products/:pid:   <3     url -----> http://localhost:8080/api/products/6
 Debería actualizar un producto existente. 
 si sirve cambie el producto con el id 6 y lo cambio, toco put pongo la url body->raw-> escribir productos que quiera eliminar

DELETE /api/products/:pid:   <3    url -----> http://localhost:8080/api/products/6
 Debería eliminar un producto por su ID.  ---> si sirve borre el producto 6 


--------------------------------------------------------------------------------------------------


7. crear Rutas para Manejo de Carritos (/api/carts/)

POST /:  <3  ---> url  http://localhost:8080/api/carts
Debe crear un nuevo carrito con la siguiente estructura:
id: Number/String (Autogenerado para asegurar que nunca se dupliquen los ids).

products: Array que contendrá objetos que representen cada producto.

----------> si lo crea pongo el post y url :
 y devuelve : {
    "id": 1,
    "products": []
}
y se guardaron el carts.json


GET /:cid:   <3
Debe listar los productos que pertenecen al carrito con el cid proporcionado.   url:http://localhost:8080/api/carts/1
si sirve 


POST /:cid/product/:pid:   <3    ------->url: http://localhost:8080/api/carts/1/product/101 
Debe agregar el producto al arreglo products del carrito seleccionado, utilizando el siguiente formato:
product: Solo debe contener el ID del producto.

quantity: Debe contener el número de ejemplares de dicho producto (se agregará de uno en uno).


Si un producto ya existente intenta agregarse, se debe incrementar el campo quantity de dicho producto.

bien me imprime: 
{
    "id": 1,
    "products": [
        {
            "product": 101,
            "quantity": 1
        }
    ]
}

Si vuelvo a enviar la misma solicitud, la cantidad del producto debería incrementarse:
devuelve 
{
    "id": 1,
    "products": [
        {
            "product": 101,
            "quantity": 2
        }
    ]
}


http://localhost:8080/products


---------------------------------------------------------------------------------------------------------
mi estructura de archivos se tiene que ver asi: 

/product-manager
   /node_modules
   /src
       app.js
       /data
            carts.json
            products.json
        /managers
            CartManager.js
            ProductManager.js
        /routers
            carts.router.js
            products.router.js
    instrucciones.txt
    package-look.json 
    package.json
    
ENTREGA N°2

1- cambiar todos los archivos para usar import
2- instalar handlebars y importarlo en el app.js, crear estructura y get que de el title
3-creo carpeta views para menejar los handlebars, con dentro el home.handlebars y la carpeta layouts con dentro el main.handlebars
4- En el archivo products.router.js, crea una ruta para renderizar la vista con los productos.



/Entrega-2-backend
   /src
       /data
            carts.json                    # Archivo JSON con datos de carritos
            products.json                 # Archivo JSON con datos de productos
       /public 
            client.js
            index.HTML
            /css
               styless.css                # Añadir estilos a la web
       /managers
            CartManager.js                # Clase para gestionar carritos
            ProductManager.js             # Clase para gestionar productos
       /routers
            carts.router.js               # Rutas relacionadas con carritos
            products.router.js            # Rutas relacionadas con productos
       /views
            products.handlebars           #paginas principales
            realtimeProducts.handlebars              
            /layouts
                main.handlebars           # estructura HTML base
    app.js                                # Configuración principal del servidor
    utils.js                              # Funciones auxiliares (opcional)
package-lock.json                     # Archivos de dependencias
package.json 
























































ENTREGA FINAL BACKEND: 

1. Crear base de datos con MongoDB Atlas y copiar link

   1.2. instalar:   npm install dotenv 
   para poder crer el .env

   1.3. en el app.js importar mongoDB con:      import mongoose from "mongoose";
   y esta constante debajo de donde pongo el puerto;    const MONGO_URI = "mongodb+srv://admins:lLqMKTcfKnTcfmNa@cluster0.kamt62p.mongodb.net/mydatabase?retryWrites=true&w=majority";
   y al final debajo de donde llamo al puerto:

// Conectar a MongoDB Atlas
mongoose 
  .connect(MONGO_URI)
  .then(() => console.log("MongoDB connected successfully"))
  .catch((err) => console.error("Error connecting MongoDB:\n" + err));
 
2. Modificar el endpoint GET /products para que acepte limit, page, sort y query como parámetros.
--> limit tiene que devolver solo el numero de elementos solcitados al momentos de la peticion y si no pido niniguno tiene que devolver 10
--> page tiene que devolver la pagina que quiero buscar, y si no pido ninguna tiene que devolver 1
--> query (numero de elemento que quiero buscar/filtro a aplicar ), en caso de no recibir query debe realizar la busqueda general
--> sort  (tiene que poder ser asc/desc), para realizar el ordenamiento por precio, en caso de no recibir sort no tiene que realizar ninigun ordenamiento
 

El método GET deberá devolver un objeto con el siguiente formato:
(hacerlos con postman que ya viene con la estructura clave-valor)
{
status:success/error

payload: Resultado de los productos solicitados

totalPages: Total de páginas

prevPage: Página anterior

nextPage: Página siguiente

page: Página actual

hasPrevPage: Indicador para saber si la página previa existe

hasNextPage: Indicador para saber si la página siguiente existe.

prevLink: Link directo a la página previa (null si hasPrevPage=false)

nextLink: Link directo a la página siguiente (null si hasNextPage=false)
}



---------hice:

a. en el products.router.js cambiar la ruta para obtener todos los productos:

// Ruta para obtener productos con paginación, filtros y ordenamiento
router.get('/', async (req, res) => {
    try {
        const { limit = 10, page = 1, sort, query } = req.query;

        // Convertir los parámetros en números enteros y preparar las opciones
        const parsedLimit = parseInt(limit, 10);
        const parsedPage = parseInt(page, 10);

        // Filtrar los productos por query (por ejemplo, categoría o disponibilidad)
        let filteredProducts = await productManager.getProducts();
        if (query) {
            filteredProducts = filteredProducts.filter(
                (product) =>
                    product.category?.toLowerCase().includes(query.toLowerCase()) ||
                    (product.status?.toString() === query)
            );
        }

        // Ordenar los productos por precio si se especifica sort
        if (sort === 'asc') {
            filteredProducts.sort((a, b) => a.price - b.price);
        } else if (sort === 'desc') {
            filteredProducts.sort((a, b) => b.price - a.price);
        }

        // Calcular la paginación
        const startIndex = (parsedPage - 1) * parsedLimit;
        const paginatedProducts = filteredProducts.slice(startIndex, startIndex + parsedLimit);

        // Calcular valores para la respuesta paginada
        const totalPages = Math.ceil(filteredProducts.length / parsedLimit);
        const hasPrevPage = parsedPage > 1;
        const hasNextPage = parsedPage < totalPages;

        // Construir el objeto de respuesta
        res.json({
            status: 'success',
            payload: paginatedProducts,
            totalPages,
            prevPage: hasPrevPage ? parsedPage - 1 : null,
            nextPage: hasNextPage ? parsedPage + 1 : null,
            page: parsedPage,
            hasPrevPage,
            hasNextPage,
            prevLink: hasPrevPage ? `/api/products?page=${parsedPage - 1}&limit=${parsedLimit}` : null,
            nextLink: hasNextPage ? `/api/products?page=${parsedPage + 1}&limit=${parsedLimit}` : null,
        });
    } catch (error) {
        console.error('Error al obtener los productos:', error);
        res.status(500).json({ status: 'error', message: error.message });
    }
});

b. probar con postman si sirvio:

Probar con Postman   

Ejemplo 1: Sin parámetros
URL GET: http://localhost:8080/api/products
Resultado esperado: Los primeros 10 productos.
--------------------------------------------------------------------------------
RESULTADO POSTMAN: 
{
    "status": "success",
    "payload": [
        {
            "id": 1,
            "title": "laptop",
            "description": "mac",
            "code": "23",
            "price": 200,
            "stock": 23,
            "category": "tecnologia"
        },
        {
            "id": 2,
            "title": "laptop",
            "description": "Descripción del producto laptop",
            "code": "P001",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 3,
            "title": "mouse",
            "description": "Descripción del producto ",
            "code": "P002",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 4,
            "title": "teclado",
            "description": "Descripción del producto ",
            "code": "P003",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 5,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P005",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 6,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P006",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 7,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P007",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 8,
            "title": "lapiz",
            "description": "Descripción del producto ",
            "code": "P008",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 9,
            "title": "hojas",
            "description": "Descripción del producto ",
            "code": "P009",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 10,
            "title": "pizarron",
            "description": "Descripción del producto ",
            "code": "P010",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        }
    ],
    "totalPages": 2,
    "prevPage": null,
    "nextPage": 2,
    "page": 1,
    "hasPrevPage": false,
    "hasNextPage": true,
    "prevLink": null,
    "nextLink": "/api/products?page=2&limit=10"
}
--------------------------------------------------------------------------------
Ejemplo 2: Con limit y page
URL GET: http://localhost:8080/api/products?limit=5&page=2
Resultado esperado: 5 productos en la segunda página.
POSTMAN:
{
    "status": "success",
    "payload": [
        {
            "id": 6,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P006",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 7,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P007",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 8,
            "title": "lapiz",
            "description": "Descripción del producto ",
            "code": "P008",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 9,
            "title": "hojas",
            "description": "Descripción del producto ",
            "code": "P009",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 10,
            "title": "pizarron",
            "description": "Descripción del producto ",
            "code": "P010",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        }
    ],
    "totalPages": 5,
    "prevPage": 1,
    "nextPage": 3,
    "page": 2,
    "hasPrevPage": true,
    "hasNextPage": true,
    "prevLink": "/api/products?page=1&limit=5",
    "nextLink": "/api/products?page=3&limit=5" }
----------------------------------------------------------------------------------
Ejemplo 3: Con sort ascendente
URL GET: http://localhost:8080/api/products?sort=asc
Resultado esperado: Productos ordenados por precio de menor a mayor.    (sirve para ascendente y descendeten)
POSTAM:
{
    "status": "success",
    "payload": [
        {
            "id": 3,
            "title": "audifonos",
            "description": "Descripción del producto ",
            "code": "P01370",
            "price": 25,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 4,
            "title": "hojas1",
            "description": "Descripción del producto ",
            "code": "P01370",
            "price": 30,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 6,
            "title": "telefono",
            "description": "Descripción del producto ",
            "code": "P01320",
            "price": 50,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 2,
            "title": "laptop",
            "description": "Descripción del producto laptop",
            "code": "P001",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 5,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P005",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 7,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P007",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 8,
            "title": "lapiz",
            "description": "Descripción del producto ",
            "code": "P008",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 9,
            "title": "hojas",
            "description": "Descripción del producto ",
            "code": "P009",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 10,
            "title": "pizarron",
            "description": "Descripción del producto ",
            "code": "P010",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 11,
            "title": "carpeta",
            "description": "Descripción del producto ",
            "code": "P011",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        }
    ],
    "totalPages": 3,
    "prevPage": null,
    "nextPage": 2,
    "page": 1,
    "hasPrevPage": false,
    "hasNextPage": true,
    "prevLink": null,
    "nextLink": "/api/products?page=2&limit=10"
}
--------------------------------------------------------------------------------
Ejemplo 4: Con query para categoría
URL: http://localhost:8080/api/products?query=electronics
Resultado esperado: Productos de la categoría electronics.    SI sirve
POSTMAN:
{
    "status": "success",
    "payload": [
        {
            "id": 2,
            "title": "laptop",
            "description": "Descripción del producto laptop",
            "code": "P001",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 3,
            "title": "audifonos",
            "description": "Descripción del producto ",
            "code": "P01370",
            "price": 25,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 4,
            "title": "hojas1",
            "description": "Descripción del producto ",
            "code": "P01370",
            "price": 30,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 5,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P005",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 6,
            "title": "telefono",
            "description": "Descripción del producto ",
            "code": "P01320",
            "price": 50,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 7,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P007",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 8,
            "title": "lapiz",
            "description": "Descripción del producto ",
            "code": "P008",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 9,
            "title": "hojas",
            "description": "Descripción del producto ",
            "code": "P009",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 10,
            "title": "pizarron",
            "description": "Descripción del producto ",
            "code": "P010",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 11,
            "title": "carpeta",
            "description": "Descripción del producto ",
            "code": "P011",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        }
    ],
    "totalPages": 3,
    "prevPage": null,
    "nextPage": 2,
    "page": 1,
    "hasPrevPage": false,
    "hasNextPage": true,
    "prevLink": null,
    "nextLink": "/api/products?page=2&limit=10"
}
--------------------------------------------------------------------------------
Ejemplo 5: Mostrar solo 5 productos de la categoria electronics , de la pagina 1 y en orden menor a mayor:
URL:http://localhost:8080/api/products?limit=5&page=1&sort=asc&query=electronics

DEVUELVE EL POSTMAN------------------------------------------------------------
{
    "status": "success",
    "payload": [
        {
            "id": 2,
            "title": "laptop",
            "description": "Descripción del producto laptop",
            "code": "P001",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 3,
            "title": "mouse",
            "description": "Descripción del producto ",
            "code": "P002",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 4,
            "title": "teclado",
            "description": "Descripción del producto ",
            "code": "P003",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 5,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P005",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        },
        {
            "id": 6,
            "title": "lapicera",
            "description": "Descripción del producto ",
            "code": "P006",
            "price": 100,
            "status": true,
            "stock": 10,
            "category": "electronics",
            "thumbnails": [
                "imagen1.jpg",
                "imagen2.jpg"
            ]
        }
    ],
    "totalPages": 3,
    "prevPage": null,
    "nextPage": 2,
    "page": 1,
    "hasPrevPage": false,
    "hasNextPage": true,
    "prevLink": null,
    "nextLink": "/api/products?page=2&limit=5"
}
----------------------------------------------------------------------------------------------------------------------------------------
3- agregar al router de carts los siguientes endpoints:

DELETE api/carts/:cid/products/:pid deberá eliminar del carrito el producto seleccionado.

PUT api/carts/:cid deberá actualizar todos los productos del carrito con un arreglo de productos.

PUT api/carts/:cid/products/:pid deberá poder actualizar SÓLO la cantidad de ejemplares del producto por cualquier cantidad pasada desde req.body


DELETE api/carts/:cid deberá eliminar todos los productos del carrito

Esta vez, para el modelo de Carts, en su propiedad products, el id de cada producto generado dentro del array
tiene que hacer referencia al modelo de Products. Modificar la ruta /:cid para que al traer todos los productos, 
los traiga completos mediante un “populate”. De esta manera almacenamos sólo el Id, pero al solicitarlo podemos desglosar los productos asociados.

-----------------------------------------------------------------------------------------------
1- hacer el endpoint delete en el carts.router.js 
// DELETE api/carts/:cid/products/:pid
a. antes tengo que crear el endpoint para crear un carrito con dentro los productos seleccionados 
a.1- en el carts.router.js endopoint para para crear un nuevo carrito con productos seleccionados:
router.post('/', async (req, res) => {
    try {
        const { products } = req.body; // Recibe un array de productos con formato [{ product: id, quantity: number }]
        
        if (!products || !Array.isArray(products) || products.length === 0) {
            return res.status(400).json({ error: 'Debes proporcionar un array de productos con sus cantidades.' });
        }

        // Verificar si los productos existen en el archivo products.json
        const allProducts = await productManager.getProducts(); // Obtener todos los productos
        const invalidProducts = products.filter(p => !allProducts.some(ap => ap.id === p.product));

        if (invalidProducts.length > 0) {
            return res.status(404).json({ error: `Los siguientes productos no existen: ${invalidProducts.map(p => p.product).join(', ')}` });
        }

        // Crear un nuevo carrito
        const newCart = await cartManager.createCart(products);

        res.status(201).json({ message: 'Carrito creado exitosamente.', cart: newCart });
    } catch (error) {
        console.error('Error al crear el carrito:', error);
        res.status(500).json({ error: error.message });
    }
});
a.2- en el CartManager.js agregar metodo createCart:
async createCart(products) {
        try {
            const carts = await this.getCarts(); // Obtener todos los carritos
            const newCart = {
                id: carts.length > 0 ? carts[carts.length - 1].id + 1 : 1, // Nuevo ID basado en el último carrito
                products
            };

            carts.push(newCart); // Agregar el nuevo carrito a la lista
            await this.saveCarts(carts); // Guardar los cambios en carts.json
            return newCart;
        } catch (error) {
            console.error('Error al crear el carrito:', error);
            throw error;
        }
}

probar con POSTMAN el delete URL:  POST http://localhost:8080/api/carts
Body (JSON):
JSON
{
    "products": [
        { "product": 1, "quantity": 2 },
        { "product": 2, "quantity": 1 }
    ]
}
---#&PROBLEMAS TECNICOS NO SIRVIO, DI VUELTA TODO EL CODIGO Y PERDI LO Q SERVIA##(no hacer eso=)--------------------------------------------------------------------------------------



























a.denuevo:     ver si siguen sirviendo la ruta en products.router.js para obtener productos con paginación, filtros y ordenamiento
a.1 si sirve, arreglar parte carritos, copiando el codigo de git hub y volverlo a como estaba antes, sin romper los productos:/
1.2 no sirvio asi que volvi a poner todo el proyecto como al principio
1.3 probar si sirve el proyecto anterior con: http://localhost:8080/products   y   http://localhost:8080/realtimeproducts
1.4 voy a importar mongoDB Atlas de nuevo y usar env para que los productos se guarden en MongoDB Atlas en vez de en el .json (cambiar todo archivo products.router para que use logica de mongoDB)
1.5 sirvio me tiene que dar como respuesta cuando ejecuto node 
-----------------------------------------------------------------------------------------------
MONGO_URI desde .env: mongodb+srv://admins:lLqMKTcfKnTcfmNa@cluster0.kamt62p.mongodb.net/productos?retryWrites=true&w=majority&appName=Cluster0
Servidor corriendo en http://localhost:8080
Conexión a MongoDB Atlas exitosa
Un cliente se ha conectado.
-------------------------------------------------------------------------------------------------
1.6 probar el Get en postman con http://localhost:8080/api/products---------> sirve y el POST tambie, y se guardan en el MongoDB Atlas


#####################################################################################################
Configurar MongoDB como sistema de persistencia.
Instalar y configurar Mongoose.
Crear modelos para Products y Carts.
Migrar la lógica de persistencia actual (JSON) a MongoDB.    <3 Hecho

Actualizar el endpoint GET /products.     
Modificar el método para soportar paginación, filtros y ordenamiento.
Formatear la respuesta según el esquema solicitado.         <3 Hecho 

Implementar nuevos endpoints para Carts.
DELETE: Eliminar productos del carrito.
PUT: Actualizar productos del carrito (individualmente o en conjunto).
DELETE: Vaciar el carrito completo.

Usar populate para desglosar los productos relacionados.

Actualizar las vistas utilizando Handlebars. 
Modificar /products para incluir paginación y detalles de cada producto.
Agregar vista para /products/:pid con detalles del producto y botón para agregar al carrito.
Crear vista para /carts/:cid para mostrar los productos del carrito específico.

Probar y documentar la implementación.
Asegurar que todos los endpoints funcionen correctamente.
Actualizar el archivo README.md con instrucciones de uso.
################################################################################################
2.Modificar el método GET para soportar paginación, filtros y ordenamiento
router.get('/', async (req, res) => {
    try {
        // Extraer parámetros de consulta (query params) con valores por defecto
        const { limit = 10, page = 1, sort, query } = req.query;

        // Construir los filtros de búsqueda
        const filter = {};
        if (query) {
            if (query === 'available') filter.available = true; // Filtrar por disponibilidad
            else filter.category = query; // Filtrar por categoría
        }

        // Opciones de paginación y ordenamiento
        const options = {
            limit: parseInt(limit),
            page: parseInt(page),
            sort: sort === 'asc' ? { price: 1 } : sort === 'desc' ? { price: -1 } : undefined,
        };

        // Usar mongoose-paginate para realizar la consulta con filtros y paginación
        const products = await Product.paginate(filter, options);

        // Construir el objeto de respuesta en el formato requerido
        const response = {
            status: 'success',
            payload: products.docs,
            totalPages: products.totalPages,
            prevPage: products.hasPrevPage ? products.page - 1 : null,
            nextPage: products.hasNextPage ? products.page + 1 : null,
            page: products.page,
            hasPrevPage: products.hasPrevPage,
            hasNextPage: products.hasNextPage,
            prevLink: products.hasPrevPage ? `/api/products?page=${products.page - 1}&sort=${sort}&query=${query}` : null,
            nextLink: products.hasNextPage ? `/api/products?page=${products.page + 1}&sort=${sort}&query=${query}` : null,
        };

        res.json(response);
    } catch (error) {
        console.error('Error al obtener los productos:', error);
        res.status(500).json({ error: 'Error al obtener los productos' });
    }
});
PROBAR CON POSTMAN:
Ejemplo 1: Sin parámetros   <3
URL GET: http://localhost:8080/api/products
Resultado esperado: Los primeros 10 productos.
--------------------------------------------------------------------------------
RESULTADO POSTMAN: http://localhost:8080/api/products?limit=10
{
    "status": "success",
    "payload": [
        {
            "_id": "6823b8f7257271f9fc69d428",
            "title": "Laptop HP",
            "description": "Laptop de última generación",
            "code": "HP-2025",
            "price": 1200,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:26:15.179Z",
            "updatedAt": "2025-05-13T21:26:15.179Z",
            "__v": 0
        },
        {
            "_id": "6823be9c257271f9fc69d42b",
            "title": "Celular A1",
            "description": "Celular de primera generación",
            "code": "HP-2026",
            "price": 1030,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:20.953Z",
            "updatedAt": "2025-05-13T21:50:20.953Z",
            "__v": 0
        },
        {
            "_id": "6823beb0257271f9fc69d42d",
            "title": "Celular A2",
            "description": "Celular de ultima generación",
            "code": "HP-2027",
            "price": 1300,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:40.869Z",
            "updatedAt": "2025-05-13T21:50:40.869Z",
            "__v": 0
        },
        {
            "_id": "6823bebe257271f9fc69d42f",
            "title": "Celular A3",
            "description": "Celular de ultima generación",
            "code": "HP-2028",
            "price": 1400,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:54.563Z",
            "updatedAt": "2025-05-13T21:50:54.563Z",
            "__v": 0
        },
        {
            "_id": "6823becb257271f9fc69d431",
            "title": "Celular A4",
            "description": "Celular de ultima generación",
            "code": "HP-2029",
            "price": 1500,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:07.002Z",
            "updatedAt": "2025-05-13T21:51:07.002Z",
            "__v": 0
        },
        {
            "_id": "6823bed7257271f9fc69d433",
            "title": "Celular A5",
            "description": "Celular de ultima generación",
            "code": "HP-2030",
            "price": 1600,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:19.803Z",
            "updatedAt": "2025-05-13T21:51:19.803Z",
            "__v": 0
        },
        {
            "_id": "6823beeb257271f9fc69d435",
            "title": "Celular A6",
            "description": "Celular de ultima generación",
            "code": "HP-2031",
            "price": 1700,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:39.878Z",
            "updatedAt": "2025-05-13T21:51:39.878Z",
            "__v": 0
        },
        {
            "_id": "6823befa257271f9fc69d437",
            "title": "Celular A7",
            "description": "Celular de ultima generación",
            "code": "HP-2032",
            "price": 1800,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:54.625Z",
            "updatedAt": "2025-05-13T21:51:54.625Z",
            "__v": 0
        },
        {
            "_id": "6823bf0a257271f9fc69d439",
            "title": "Celular A8",
            "description": "Celular de ultima generación",
            "code": "HP-2033",
            "price": 1900,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:52:10.031Z",
            "updatedAt": "2025-05-13T21:52:10.031Z",
            "__v": 0
        },
        {
            "_id": "6823bf1f257271f9fc69d43b",
            "title": "Celular A9",
            "description": "Celular de ultima generación",
            "code": "HP-2034",
            "price": 2000,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:52:31.194Z",
            "updatedAt": "2025-05-13T21:52:31.194Z",
            "__v": 0
        }
    ],
    "totalPages": 2,
    "prevPage": null,
    "nextPage": 2,
    "page": 1,
    "hasPrevPage": false,
    "hasNextPage": true,
    "prevLink": null,
    "nextLink": "/api/products?limit=10&page=2&sort=undefined&query=undefined"
}
--------------------------------------------------------------------------------
Ejemplo 2: Con limit y page      <3
URL GET: http://localhost:8080/api/products?limit=5&page=2
Resultado esperado: 5 productos en la segunda página.
POSTMAN:
{
    "status": "success",
    "payload": [
        {
            "_id": "6823bf73257271f9fc69d441",
            "title": "carpeta",
            "description": "a4",
            "code": "HP-3000",
            "price": 100,
            "stock": 100,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:53:55.722Z",
            "updatedAt": "2025-05-13T21:53:55.722Z",
            "__v": 0
        },
        {
            "_id": "6823d46812fe013930270a74",
            "title": "carpeta 2",
            "description": "a4",
            "code": "HP-3001",
            "price": 10,
            "stock": 100,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:23:20.846Z",
            "updatedAt": "2025-05-13T23:23:20.846Z",
            "__v": 0
        },
        {
            "_id": "6823d47f12fe013930270a76",
            "title": "carpeta 3",
            "description": "a4",
            "code": "HP-3002",
            "price": 20,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:23:43.794Z",
            "updatedAt": "2025-05-13T23:23:43.794Z",
            "__v": 0
        },
        {
            "_id": "6823d48f12fe013930270a78",
            "title": "carpeta 4",
            "description": "a4",
            "code": "HP-3003",
            "price": 30,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:23:59.165Z",
            "updatedAt": "2025-05-13T23:23:59.165Z",
            "__v": 0
        },
        {
            "_id": "6823d49b12fe013930270a7a",
            "title": "carpeta 5",
            "description": "a4",
            "code": "HP-3004",
            "price": 40,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:24:11.544Z",
            "updatedAt": "2025-05-13T23:24:11.544Z",
            "__v": 0
        },
        {
            "_id": "6823d4a712fe013930270a7c",
            "title": "carpeta 6",
            "description": "a4",
            "code": "HP-3005",
            "price": 450,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:24:23.862Z",
            "updatedAt": "2025-05-13T23:24:23.862Z",
            "__v": 0
        },
        {
            "_id": "6823d4b712fe013930270a7e",
            "title": "carpeta 7",
            "description": "a4",
            "code": "HP-3006",
            "price": 4500,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:24:39.218Z",
            "updatedAt": "2025-05-13T23:24:39.218Z",
            "__v": 0
        },
        {
            "_id": "6823d4c612fe013930270a80",
            "title": "carpeta 8",
            "description": "a4",
            "code": "HP-3007",
            "price": 4600,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:24:54.139Z",
            "updatedAt": "2025-05-13T23:24:54.139Z",
            "__v": 0
        },
        {
            "_id": "6823d4eb12fe013930270a82",
            "title": "auriculares",
            "description": "bluethu",
            "code": "HP-3008",
            "price": 4600,
            "stock": 102,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:25:31.616Z",
            "updatedAt": "2025-05-13T23:25:31.616Z",
            "__v": 0
        },
        {
            "_id": "6823d51812fe013930270a84",
            "title": "auriculares1",
            "description": "bluethu",
            "code": "HP-3009",
            "price": 4600,
            "stock": 102,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:26:16.852Z",
            "updatedAt": "2025-05-13T23:26:16.852Z",
            "__v": 0
        }
    ],
    "totalPages": 2,
    "prevPage": 1,
    "nextPage": null,
    "page": 2,
    "hasPrevPage": true,
    "hasNextPage": false,
    "prevLink": "/api/products?page=1&sort=undefined&query=undefined",
    "nextLink": null
}
----------------------------------------------------------------------------------
Ejemplo 3: Con sort ascendente     <3
URL GET: http://localhost:8080/api/products?sort=asc
Resultado esperado: Productos ordenados por precio de menor a mayor.    (sirve para ascendente y descendeten)
POSTMAN:
{
    "status": "success",
    "payload": [
        {
            "_id": "6823d46812fe013930270a74",
            "title": "carpeta 2",
            "description": "a4",
            "code": "HP-3001",
            "price": 10,
            "stock": 100,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:23:20.846Z",
            "updatedAt": "2025-05-13T23:23:20.846Z",
            "__v": 0
        },
        {
            "_id": "6823d47f12fe013930270a76",
            "title": "carpeta 3",
            "description": "a4",
            "code": "HP-3002",
            "price": 20,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:23:43.794Z",
            "updatedAt": "2025-05-13T23:23:43.794Z",
            "__v": 0
        },
        {
            "_id": "6823d48f12fe013930270a78",
            "title": "carpeta 4",
            "description": "a4",
            "code": "HP-3003",
            "price": 30,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:23:59.165Z",
            "updatedAt": "2025-05-13T23:23:59.165Z",
            "__v": 0
        },
        {
            "_id": "6823d49b12fe013930270a7a",
            "title": "carpeta 5",
            "description": "a4",
            "code": "HP-3004",
            "price": 40,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:24:11.544Z",
            "updatedAt": "2025-05-13T23:24:11.544Z",
            "__v": 0
        },
        {
            "_id": "6823bf73257271f9fc69d441",
            "title": "carpeta",
            "description": "a4",
            "code": "HP-3000",
            "price": 100,
            "stock": 100,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:53:55.722Z",
            "updatedAt": "2025-05-13T21:53:55.722Z",
            "__v": 0
        },
        {
            "_id": "6823d4a712fe013930270a7c",
            "title": "carpeta 6",
            "description": "a4",
            "code": "HP-3005",
            "price": 450,
            "stock": 102,
            "category": "Papeleria",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T23:24:23.862Z",
            "updatedAt": "2025-05-13T23:24:23.862Z",
            "__v": 0
        },
        {
            "_id": "6823be9c257271f9fc69d42b",
            "title": "Celular A1",
            "description": "Celular de primera generación",
            "code": "HP-2026",
            "price": 1030,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:20.953Z",
            "updatedAt": "2025-05-13T21:50:20.953Z",
            "__v": 0
        },
        {
            "_id": "6823b8f7257271f9fc69d428",
            "title": "Laptop HP",
            "description": "Laptop de última generación",
            "code": "HP-2025",
            "price": 1200,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:26:15.179Z",
            "updatedAt": "2025-05-13T21:26:15.179Z",
            "__v": 0
        },
        {
            "_id": "6823beb0257271f9fc69d42d",
            "title": "Celular A2",
            "description": "Celular de ultima generación",
            "code": "HP-2027",
            "price": 1300,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:40.869Z",
            "updatedAt": "2025-05-13T21:50:40.869Z",
            "__v": 0
        },
        {
            "_id": "6823bebe257271f9fc69d42f",
            "title": "Celular A3",
            "description": "Celular de ultima generación",
            "code": "HP-2028",
            "price": 1400,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:54.563Z",
            "updatedAt": "2025-05-13T21:50:54.563Z",
            "__v": 0
        }
    ],
    "totalPages": 2,
    "prevPage": null,
    "nextPage": 2,
    "page": 1,
    "hasPrevPage": false,
    "hasNextPage": true,
    "prevLink": null,
    "nextLink": "/api/products?page=2&sort=asc&query=undefined"
}
--------------------------------------------------------------------------------
Ejemplo 4: Con query para categoría   <3
URL: http://localhost:8080/api/products?query=Electronics
Resultado esperado: Productos de la categoría electronics.    SI sirve
POSTMAN:
{
    "status": "success",
    "payload": [
        {
            "_id": "6823b8f7257271f9fc69d428",
            "title": "Laptop HP",
            "description": "Laptop de última generación",
            "code": "HP-2025",
            "price": 1200,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:26:15.179Z",
            "updatedAt": "2025-05-13T21:26:15.179Z",
            "__v": 0
        },
        {
            "_id": "6823be9c257271f9fc69d42b",
            "title": "Celular A1",
            "description": "Celular de primera generación",
            "code": "HP-2026",
            "price": 1030,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:20.953Z",
            "updatedAt": "2025-05-13T21:50:20.953Z",
            "__v": 0
        },
        {
            "_id": "6823beb0257271f9fc69d42d",
            "title": "Celular A2",
            "description": "Celular de ultima generación",
            "code": "HP-2027",
            "price": 1300,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:40.869Z",
            "updatedAt": "2025-05-13T21:50:40.869Z",
            "__v": 0
        },
        {
            "_id": "6823bebe257271f9fc69d42f",
            "title": "Celular A3",
            "description": "Celular de ultima generación",
            "code": "HP-2028",
            "price": 1400,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:54.563Z",
            "updatedAt": "2025-05-13T21:50:54.563Z",
            "__v": 0
        },
        {
            "_id": "6823becb257271f9fc69d431",
            "title": "Celular A4",
            "description": "Celular de ultima generación",
            "code": "HP-2029",
            "price": 1500,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:07.002Z",
            "updatedAt": "2025-05-13T21:51:07.002Z",
            "__v": 0
        },
        {
            "_id": "6823bed7257271f9fc69d433",
            "title": "Celular A5",
            "description": "Celular de ultima generación",
            "code": "HP-2030",
            "price": 1600,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:19.803Z",
            "updatedAt": "2025-05-13T21:51:19.803Z",
            "__v": 0
        },
        {
            "_id": "6823beeb257271f9fc69d435",
            "title": "Celular A6",
            "description": "Celular de ultima generación",
            "code": "HP-2031",
            "price": 1700,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:39.878Z",
            "updatedAt": "2025-05-13T21:51:39.878Z",
            "__v": 0
        },
        {
            "_id": "6823befa257271f9fc69d437",
            "title": "Celular A7",
            "description": "Celular de ultima generación",
            "code": "HP-2032",
            "price": 1800,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:54.625Z",
            "updatedAt": "2025-05-13T21:51:54.625Z",
            "__v": 0
        },
        {
            "_id": "6823bf0a257271f9fc69d439",
            "title": "Celular A8",
            "description": "Celular de ultima generación",
            "code": "HP-2033",
            "price": 1900,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:52:10.031Z",
            "updatedAt": "2025-05-13T21:52:10.031Z",
            "__v": 0
        },
        {
            "_id": "6823bf1f257271f9fc69d43b",
            "title": "Celular A9",
            "description": "Celular de ultima generación",
            "code": "HP-2034",
            "price": 2000,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:52:31.194Z",
            "updatedAt": "2025-05-13T21:52:31.194Z",
            "__v": 0
        }
    ],
    "totalPages": 2,
    "prevPage": null,
    "nextPage": 2,
    "page": 1,
    "hasPrevPage": false,
    "hasNextPage": true,
    "prevLink": null,
    "nextLink": "/api/products?page=2&sort=undefined&query=Electronics"
}
--------------------------------------------------------------------------------
Ejemplo 5: todo(muestra los 10 productos de la primera pagina, solo de la categoria electronics y ordenados de menor a mayor)
RESULTADO POSTMAN: http://localhost:8080/api/products?limit=10&page=1&sort=asc&query=Electronics 
{
    "status": "success",
    "payload": [
        {
            "_id": "6823be9c257271f9fc69d42b",
            "title": "Celular A1",
            "description": "Celular de primera generación",
            "code": "HP-2026",
            "price": 1030,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:20.953Z",
            "updatedAt": "2025-05-13T21:50:20.953Z",
            "__v": 0
        },
        {
            "_id": "6823b8f7257271f9fc69d428",
            "title": "Laptop HP",
            "description": "Laptop de última generación",
            "code": "HP-2025",
            "price": 1200,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:26:15.179Z",
            "updatedAt": "2025-05-13T21:26:15.179Z",
            "__v": 0
        },
        {
            "_id": "6823beb0257271f9fc69d42d",
            "title": "Celular A2",
            "description": "Celular de ultima generación",
            "code": "HP-2027",
            "price": 1300,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:40.869Z",
            "updatedAt": "2025-05-13T21:50:40.869Z",
            "__v": 0
        },
        {
            "_id": "6823bebe257271f9fc69d42f",
            "title": "Celular A3",
            "description": "Celular de ultima generación",
            "code": "HP-2028",
            "price": 1400,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:50:54.563Z",
            "updatedAt": "2025-05-13T21:50:54.563Z",
            "__v": 0
        },
        {
            "_id": "6823becb257271f9fc69d431",
            "title": "Celular A4",
            "description": "Celular de ultima generación",
            "code": "HP-2029",
            "price": 1500,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:07.002Z",
            "updatedAt": "2025-05-13T21:51:07.002Z",
            "__v": 0
        },
        {
            "_id": "6823bed7257271f9fc69d433",
            "title": "Celular A5",
            "description": "Celular de ultima generación",
            "code": "HP-2030",
            "price": 1600,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:19.803Z",
            "updatedAt": "2025-05-13T21:51:19.803Z",
            "__v": 0
        },
        {
            "_id": "6823beeb257271f9fc69d435",
            "title": "Celular A6",
            "description": "Celular de ultima generación",
            "code": "HP-2031",
            "price": 1700,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:39.878Z",
            "updatedAt": "2025-05-13T21:51:39.878Z",
            "__v": 0
        },
        {
            "_id": "6823befa257271f9fc69d437",
            "title": "Celular A7",
            "description": "Celular de ultima generación",
            "code": "HP-2032",
            "price": 1800,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:51:54.625Z",
            "updatedAt": "2025-05-13T21:51:54.625Z",
            "__v": 0
        },
        {
            "_id": "6823bf0a257271f9fc69d439",
            "title": "Celular A8",
            "description": "Celular de ultima generación",
            "code": "HP-2033",
            "price": 1900,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:52:10.031Z",
            "updatedAt": "2025-05-13T21:52:10.031Z",
            "__v": 0
        },
        {
            "_id": "6823bf1f257271f9fc69d43b",
            "title": "Celular A9",
            "description": "Celular de ultima generación",
            "code": "HP-2034",
            "price": 2000,
            "stock": 20,
            "category": "Electronics",
            "available": true,
            "thumbnails": [
                "image1.jpg",
                "image2.jpg"
            ],
            "createdAt": "2025-05-13T21:52:31.194Z",
            "updatedAt": "2025-05-13T21:52:31.194Z",
            "__v": 0
        }
    ],
    "totalPages": 2,
    "prevPage": null,
    "nextPage": 2,
    "page": 1,
    "hasPrevPage": false,
    "hasNextPage": true,
    "prevLink": null,
    "nextLink": "/api/products?page=2&sort=asc&query=Electronics"
}
-------------------------------------------------------------------------------------------------------------------


$$$$$$$$$$$$$$$$$$$$$$$Ahora los Carritos$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
1. primero hacer que el carts.router.js use la persistencia de mongoDB y guarde los carritos en MongoDB Atlas

2 probar los endpoints con Postman 
------------------------------------------------------------------------------------------------
1.POST /api/carts: Crea un nuevo carrito.    
RESULTADO POSTMAN:      http://localhost:8080/api/carts       (tocar --->body>none)
{
    "products": [],
    "_id": "6823fdd3887121ec049d71f2",
    "createdAt": "2025-05-14T02:20:08.089Z",
    "updatedAt": "2025-05-14T02:20:08.089Z",
    "__v": 0
}
---------------------------------------------------------------------------------------
2.POST /api/carts/:cid/products/:pid: Agrega un producto a un carrito.
       http://localhost:8080/api/carts/<cid>/products/<pid>    
2.1 CAMBIAR <sid> por el id del carrito creado anterior y <pid> con el id del producto que quiera agregar al carrito
    http://localhost:8080/api/carts/6823fdd3887121ec049d71f2/products/6823b8f7257271nf9fc69d428
2.2 agregar un {"quantity": 2} <----- en el body->raw    que es la cant de ese producto que quiero agregar al producto
RESULTADO POSTMAN:
{
    "_id": "6823fdd3887121ec049d71f2",
    "products": [
        {
            "product": "6823b8f7257271f9fc69d428",
            "quantity": 2,
            "_id": "682400af887121ec049d71f9"
        }
    ],
    "createdAt": "2025-05-14T02:20:08.089Z",
    "updatedAt": "2025-05-14T02:32:15.672Z",
    "__v": 1
} 
2.3  Verificar que se guardo correctamente en el mongoDB Atlas 
{
  "_id": "6823fdd3887121ec049d71f2", // ID del carrito
  "products": [
    {
      "product": "6823b8f7257271f9fc69d428", // ID del producto agregado al carrito
      "quantity": 2, // Cantidad del producto en el carrito
      "_id": "682400af887121ec049d71f9", // ID interno de este producto en el carrito
      "createdAt": "2025-05-14T02:20:08.089+00:00", // Fecha en que se agregó el producto
      "updatedAt": "2025-05-14T02:32:15.672+00:00", // Última actualización
      "__v": 1 // Versión del documento (típico de Mongoose)
    }
  ]
}

------------------------------------------------------------------------------------------------

3.DELETE /api/carts/:cid/products/:pid: Elimina un producto del carrito.
RESULTADO POSTMAN:   elimino el que cree recien : http://localhost:8080/api/carts/6823fdd3887121ec049d71f2/products/6823b8f7257271f9fc69d428
{
    "message": "Producto eliminado del carrito.",
    "cart": {
        "_id": "6823fdd3887121ec049d71f2",
        "products": [],
        "createdAt": "2025-05-14T02:20:08.089Z",
        "updatedAt": "2025-05-14T03:09:55.084Z",
        "__v": 4
    }
}
RESULTADO POSTMAN SI QUIERO ELIMINAR PRODUCTO QUE NO ESTA EN EL CARRITO:
{
    "error": "Producto no encontrado en el carrito."
}

-------------------------------------------------------------------------------------------------

4.GET /api/carts/:cid: Obtiene un carrito con los productos poblados.   ---> usar POPULATE para mostrar los detalles de los productos
4.1 crear dentro de src, carpeta controllers, dentro--> carts.controller.js:
import Cart from '../models/Cart.js'; // Importa el modelo de carrito

export const getCartById = async (req, res) => {
  try {
    const { cid } = req.params;

    // Buscar el carrito y poblar los detalles de los productos
    const cart = await Cart.findById(cid).populate('products.product'); // Aquí se usa .populate()
    if (!cart) {
      return res.status(404).json({ error: "Carrito no encontrado." });
    }

    // Vaciar el array de productos
    cart.products = [];

    // Guardar el carrito actualizado
    await cart.save();

    res.status(200).json(cart);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: error.message });
  }
};
4.2 dentro de carts.router.js importar el controlador 
RESULTADO POSTMAN:          http://localhost:8080/api/carts/6823fdd3887121ec049d71f2
{
    "_id": "6823fdd3887121ec049d71f2",
    "products": [
        {
            "product": {
                "_id": "6823b8f7257271f9fc69d428",
                "title": "Laptop HP",
                "description": "Laptop de última generación",
                "code": "HP-2025",
                "price": 1200,
                "stock": 20,
                "category": "Electronics",
                "available": true,
                "thumbnails": [
                    "image1.jpg",
                    "image2.jpg"
                ],
                "createdAt": "2025-05-13T21:26:15.179Z",
                "updatedAt": "2025-05-13T21:26:15.179Z",
                "__v": 0
            },
            "quantity": 2,
            "_id": "68240d0f6fd3d3190bf86649"
        }
    ],
    "createdAt": "2025-05-14T02:20:08.089Z",
    "updatedAt": "2025-05-14T03:25:03.540Z",
    "__v": 5
}
-------------------------------------------------------------------------------------------------
5.PUT /api/carts/:cid/products/:pid: Actualiza la cantidad de un producto.
RESULTADO POSTMAN:    http://localhost:8080/api/carts/6823fdd3887121ec049d71f2/products/6823b8f7257271f9fc69d428
{
    "_id": "6823fdd3887121ec049d71f2",
    "products": [
        {
            "product": "6823b8f7257271f9fc69d428",
            "quantity": 5,
            "_id": "68240d0f6fd3d3190bf86649"
        }
    ],
    "createdAt": "2025-05-14T02:20:08.089Z",
    "updatedAt": "2025-05-14T04:31:17.055Z",
    "__v": 5
}
----------------------------------------------------------------------------------------------
6.DELETE /api/carts/:cid: Vacía el carrito.       
6.1 primero agregarle otro producto mas al carrito, con el post
POSTMAN:
{
    "_id": "6823fdd3887121ec049d71f2",
    "products": [
        {
            "product": "6823b8f7257271f9fc69d428",
            "quantity": 5,
            "_id": "68240d0f6fd3d3190bf86649"
        },
        {
            "product": "6823be9c257271f9fc69d42b",
            "quantity": 2,
            "_id": "68241e796366e1abac23296d"
        }
    ],
    "createdAt": "2025-05-14T02:20:08.089Z",
    "updatedAt": "2025-05-14T04:39:21.539Z",
    "__v": 6
}
6.2 ahora con el delete vaciar carrito
6.3 sirve pero no muestra nada, para que de confirmacion pongo la ruta en carts.routerr.js (que dirige al getCartById de carts.controllers.js)
// Ruta para vaciar el carrito
router.delete('/:cid', getCartById);
RESULTADO POSTMAN:    http://localhost:8080/api/carts/6823fdd3887121ec049d71f2  (muestra que el carrito esta vacio)
{
    "_id": "6823fdd3887121ec049d71f2",
    "products": [],
    "createdAt": "2025-05-14T02:20:08.089Z",
    "updatedAt": "2025-05-14T05:01:04.345Z",
    "__v": 9
}


&&&&&&&&&&&&&&&&&&&&&&&&&6&&&& Ahora las vistas &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&66















/Entrega Final Backend
   /src
       /data
            carts.json                    # Archivo JSON con datos de carritos
            products.json                 # Archivo JSON con datos de productos
        /managers
            CartManager.js                # Clase para gestionar carritos
            ProductManager.js             # Clase para gestionar productos
        /models 
            Cart.js
            Products.js
       /public 
            client.js
            index.HTML
            /css
               styless.css                # Añadir estilos a la web
       /routers
            carts.router.js               # Rutas relacionadas con carritos
            products.router.js            # Rutas relacionadas con productos
            views.router.js               # Rutas relacionadas al producto mostrados en la Web
       /views
            products.handlebars           # pagina principal (donde se muestran los productos)
            realtimeProducts.handlebars   # productos en tiempo real 
            /layouts
                main.handlebars           # estructura HTML base
        /controllers
            carts.controller              # Para usar populate
    app.js                                # Configuración principal del servidor
    utils.js                              # Funciones auxiliares (opcional)
    .env
.gitignore
package.json 
package-lock.json                          # Archivos de dependencias



router.get('/', async (req, res) => {
    try {
        const { limit, page, sort, query } = req.query;

        // Construir el filtro de búsqueda
        let filter = {};
        if (query) {
            filter = { category: { $regex: query, $options: 'i' } }; // Insensible a mayúsculas y minúsculas
        }

        // Si no se especifica `limit` o `page`, devolver todos los productos
        if (!limit && !page) {
            // Obtener todos los productos sin paginación
            const products = await Product.find(filter).sort(sort === 'asc' ? { price: 1 } : sort === 'desc' ? { price: -1 } : {});
            return res.render('products', {
                title: 'Lista de Productos',
                products,
                totalProducts: products.length,
            });
        }

        // Opciones de paginación
        const options = {
            limit: parseInt(limit) || 10, // Predeterminado: 10 productos por página
            page: parseInt(page) || 1, // Predeterminado: página 1
            sort: sort === 'asc' ? { price: 1 } : sort === 'desc' ? { price: -1 } : undefined,
        };

        // Obtener productos paginados
        const products = await Product.paginate(filter, options);

        // Renderizar los productos con paginación
        res.render('products', {
            title: 'Lista de Productos',
            products: products.docs,
            totalPages: products.totalPages,
            page: products.page,
            hasPrevPage: products.hasPrevPage,
            hasNextPage: products.hasNextPage,
            prevPage: products.prevPage,
            nextPage: products.nextPage,
        });
    } catch (error) {
        console.error('Error al obtener productos:', error);
        res.status(500).json({ status: 'error', message: error.message });
    }
});













router.get('/', async (req, res) => {
    try {
        const { limit = 10, page = 1, sort, query } = req.query;

        let filter = {};
        if (query) {
            filter = { category: query }; // Filtra por categoría
        }

        const options = {
            limit: parseInt(limit),
            page: parseInt(page),
            sort: sort === 'asc' ? { price: 1 } : sort === 'desc' ? { price: -1 } : undefined,
        };

        const products = await Product.paginate(filter, options); // Usando mongoose-paginate-v2
        res.json({
            status: "success",
            payload: products.docs,
            totalPages: products.totalPages,
            prevPage: products.hasPrevPage ? page - 1 : null,
            nextPage: products.hasNextPage ? page + 1 : null,
            page: products.page,
            hasPrevPage: products.hasPrevPage,
            hasNextPage: products.hasNextPage,
            prevLink: products.hasPrevPage ? `/api/products?limit=${limit}&page=${page - 1}&sort=${sort}&query=${query}` : null,
            nextLink: products.hasNextPage ? `/api/products?limit=${limit}&page=${page + 1}&sort=${sort}&query=${query}` : null,
        });
    } catch (error) {
        res.status(500).json({ status: 'error', message: error.message });
    }
});